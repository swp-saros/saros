diff --git a/build.gradle.kts b/build.gradle.kts
index 32fbf342c..49b8b8a09 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -54,6 +54,13 @@ subprojects {
         create("releaseDep") { // contains all dependencies which has to be included into the release jar/zip
             isTransitive = false // avoid that the whole dependency tree is released
         }
+        create("bundle") { // contains all dependencies which has to be included into the release jar/zip
+            isTransitive = false // avoid that the whole dependency tree is released
+        }
+
+        create("bundleApi") { // contains all dependencies which has to be included into the release jar/zip
+            isTransitive = false // avoid that the whole dependency tree is released
+        }
     }

     configure<PmdExtension> {
@@ -139,6 +146,9 @@ subprojects {
     // Bridge that routes log4j calls to log4j2
     val log4j2Bridge = "org.apache.logging.log4j:log4j-1.2-api:$log4j2VersionNr"

+    projectToConf.extra["commons-lang3"] = "org.apache.commons:commons-lang3:3.8.1"
+
+
     projectToConf.extra["junitVersion"] = junitVersion
     projectToConf.extra["log4j2ApiVersion"] = log4j2Api
     projectToConf.extra["log4j2CoreVersion"] = log4j2Core
diff --git a/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipseExtension.java b/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipseExtension.java
index e6f75195c..77512a6da 100644
--- a/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipseExtension.java
+++ b/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipseExtension.java
@@ -30,6 +30,7 @@ public class SarosEclipseExtension {
   private boolean addDependencies = false;
   private boolean addPdeNature = false;
   private boolean createBundleJar = false;
+  private List<String> configs = new ArrayList<>();

   public File getManifest() {
     return manifest;
@@ -103,6 +104,14 @@ public class SarosEclipseExtension {
     return createBundleJar;
   }

+  public List<String> getConfigs() {
+    return configs;
+  }
+
+  public void setConfigs(List<String> configs){
+    this.configs = configs;
+  }
+
   public void setCreateBundleJar(boolean createBundleJar) {
     this.createBundleJar = createBundleJar;
   }
diff --git a/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipsePlugin.java b/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipsePlugin.java
index 7f7674b5e..ff4986552 100644
--- a/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipsePlugin.java
+++ b/buildSrc/src/main/java/saros/gradle/eclipse/SarosEclipsePlugin.java
@@ -4,6 +4,8 @@ import org.gradle.api.GradleException;
 import org.gradle.api.Plugin;
 import org.gradle.api.Project;
 import org.gradle.api.Task;
+import java.util.List;
+import java.util.ArrayList;
 import saros.gradle.eclipse.configurator.EclipseConfigurator;
 import saros.gradle.eclipse.configurator.JarConfigurator;
 import saros.gradle.eclipse.configurator.OsgiBundleVersionConfigurator;
@@ -70,7 +72,10 @@ public class SarosEclipsePlugin implements Plugin<Project> {

     if (e.isCreateBundleJar()) {
       methodRequiresManifest("create bundle jar", e);
-      new JarConfigurator(p).createBundleJar(e.getManifest());
+      List<String> defaultConfigs = new ArrayList<>();
+      defaultConfigs.add("releaseDep");
+      List<String> jarConfigs = e.getConfigs().isEmpty() ? defaultConfigs : e.getConfigs();
+      new JarConfigurator(p, jarConfigs).createBundleJar(e.getManifest());
     }

     if (e.isAddDependencies()) {
diff --git a/buildSrc/src/main/java/saros/gradle/eclipse/configurator/JarConfigurator.java b/buildSrc/src/main/java/saros/gradle/eclipse/configurator/JarConfigurator.java
index c1f5585e8..651dc5105 100644
--- a/buildSrc/src/main/java/saros/gradle/eclipse/configurator/JarConfigurator.java
+++ b/buildSrc/src/main/java/saros/gradle/eclipse/configurator/JarConfigurator.java
@@ -1,6 +1,7 @@
 package saros.gradle.eclipse.configurator;

 import java.io.File;
+import java.util.List;
 import org.gradle.api.GradleException;
 import org.gradle.api.Project;
 import org.gradle.api.file.CopySpec;
@@ -14,13 +15,14 @@ public class JarConfigurator {
   private static final String JAVA_PLUGIN_ID = "java";
   private static final String JAR_TASK_NAME = "jar";

-  private static final String RELEASE_CONFIG_NAME = "releaseDep";
   private static final String JAR_LIB_DESTINATION = "lib";

   private Project project;
+  private List<String> configs;

-  public JarConfigurator(Project project) {
+  public JarConfigurator(Project project, List<String> configs) {
     this.project = project;
+    this.configs = configs;
     project.getPluginManager().apply(JAVA_PLUGIN_ID);
   }

@@ -33,8 +35,10 @@ public class JarConfigurator {
     jarTask.manifest((Manifest mf) -> mf.from(manifestFile));
     SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);
     jarTask.from(sourceSets.getByName(JAVA_MAIN_SOURCE_SET_NAME).getOutput());
-    jarTask.into(
-        JAR_LIB_DESTINATION,
-        (CopySpec cs) -> cs.from(project.getConfigurations().getByName(RELEASE_CONFIG_NAME)));
+    for (String jarConfig : this.configs) {
+      jarTask.into(
+          JAR_LIB_DESTINATION,
+          (CopySpec cs) -> cs.from(project.getConfigurations().getByName(jarConfig)));
+    }
   }
 }
diff --git a/core/build.gradle.kts b/core/build.gradle.kts
index 8821e37e7..7d4257426 100644
--- a/core/build.gradle.kts
+++ b/core/build.gradle.kts
@@ -1,28 +1,35 @@
 plugins {
   id("saros.gradle.eclipse.plugin")
+  `java-library`
 }

 val versionQualifier = ext.get("versionQualifier") as String
+val commonsLang = ext.get("commons-lang3") as String

 val log4j2ApiVersion = ext.get("log4j2ApiVersion") as String
 val log4j2CoreVersion = ext.get("log4j2CoreVersion") as String
 val log4j2BridgeVersion = ext.get("log4j2BridgeVersion") as String

 configurations {
+    val bundle by getting {}
+    val bundleApi by getting {}
+    val api by getting {
+        extendsFrom(bundleApi)
+    }
+    val implementation by getting {
+        extendsFrom(bundle)
+    }
     // Defined in root build.gradle
     val testConfig by getting {}
-    val releaseDep by getting {}

-    // Default configuration
-    val compile by getting {
-        extendsFrom(releaseDep)
-    }
     val testCompile by getting {
         extendsFrom(testConfig)
     }
+    val compile by getting {}
     val plain by creating {
         extendsFrom(compile)
     }
+
 }

 sarosEclipse {
@@ -30,29 +37,32 @@ sarosEclipse {
     isCreateBundleJar = true
     isAddPdeNature = true
     pluginVersionQualifier = versionQualifier
+    configs = listOf(
+        "bundle", "bundleApi"
+    )
 }

 dependencies {
-    releaseDep("commons-codec:commons-codec:1.3")
-    releaseDep("commons-io:commons-io:2.0.1")
-    releaseDep("org.apache.commons:commons-lang3:3.8.1")
+    bundle("commons-codec:commons-codec:1.3")
+    bundle("commons-io:commons-io:2.0.1")
+    bundle(commonsLang)

-    releaseDep("javax.jmdns:jmdns:3.4.1")
-    releaseDep("xpp3:xpp3:1.1.4c")
-    releaseDep("com.thoughtworks.xstream:xstream:1.4.10")
-    releaseDep("org.gnu.inet:libidn:1.15")
+    bundleApi("javax.jmdns:jmdns:3.4.1")
+    bundleApi("xpp3:xpp3:1.1.4c")
+    bundleApi("com.thoughtworks.xstream:xstream:1.4.10")
+    bundleApi("org.gnu.inet:libidn:1.15")

-    releaseDep(log4j2ApiVersion)
-    releaseDep(log4j2CoreVersion)
-    releaseDep(log4j2BridgeVersion)
+    bundle(log4j2ApiVersion)
+    bundle(log4j2CoreVersion)
+    bundle(log4j2BridgeVersion)

     // TODO: use real release. This version is a customized SNAPSHOT
-    releaseDep(files("libs/weupnp.jar"))
+    bundleApi(files("libs/weupnp.jar"))
     // Workaround until we updated to a newer smack version
-    releaseDep(files("libs/smack-3.4.1.jar"))
-    releaseDep(files("libs/smackx-3.4.1.jar"))
+    bundleApi(files("libs/smack-3.4.1.jar"))
+    bundleApi(files("libs/smackx-3.4.1.jar"))
     // Workaround until we can publish and use (without a user token) the repackaged jar in GitHub Packages
-    releaseDep(rootProject.files("libs/picocontainer-2.11.2-patched_relocated.jar"))
+    bundleApi(rootProject.files("libs/picocontainer-2.11.2-patched_relocated.jar"))
 }

 sourceSets {
diff --git a/eclipse/build.gradle.kts b/eclipse/build.gradle.kts
index 2ddf6d5b0..4bd51d5a5 100644
--- a/eclipse/build.gradle.kts
+++ b/eclipse/build.gradle.kts
@@ -9,6 +9,10 @@ import com.diffplug.gradle.pde.EclipseRelease

 val versionQualifier = ext.get("versionQualifier") as String
 val eclipseVersionNr = ext.get("eclipseVersion") as String
+val commonsLang = ext.get("commons-lang3") as String
+val log4j2ApiVersion = ext.get("log4j2ApiVersion") as String
+val log4j2CoreVersion = ext.get("log4j2CoreVersion") as String
+val log4j2BridgeVersion = ext.get("log4j2BridgeVersion") as String

 configurations {
     val testConfig by getting {}
@@ -40,6 +44,10 @@ sourceSets {

 dependencies {
     implementation(project(":saros.core"))
+    implementation(log4j2ApiVersion)
+    implementation(log4j2CoreVersion)
+    implementation(log4j2BridgeVersion)
+    implementation(commonsLang)
     // This is a workaround for https://github.com/saros-project/saros/issues/1086
     implementation("org.eclipse.platform:org.eclipse.urischeme:1.1.0")
     // This is a workaround for https://github.com/saros-project/saros/issues/1114
diff --git a/stf/build.gradle.kts b/stf/build.gradle.kts
index efc7af91a..5af102857 100644
--- a/stf/build.gradle.kts
+++ b/stf/build.gradle.kts
@@ -1,5 +1,6 @@
 plugins {
   id("saros.gradle.eclipse.plugin")
+  `java-library`
 }

 val versionQualifier = (ext.get("versionQualifier") ?: "") as String
@@ -24,18 +25,18 @@ configurations {

 dependencies {
     if (junitVersion != null) {
-        compile(junitVersion)
+        implementation(junitVersion)
     }
-    compile(project(":saros.core"))
-    compile(project(":saros.eclipse"))
+    implementation(project(":saros.core"))
+    implementation(project(":saros.eclipse"))
     // This is a workaround for https://github.com/saros-project/saros/issues/1086
     implementation("org.eclipse.platform:org.eclipse.urischeme:1.1.0")
     // This is a workaround for https://github.com/saros-project/saros/issues/1114
     implementation("org.eclipse.platform:org.eclipse.ui.ide:3.17.200")
     implementation("org.eclipse.platform:org.eclipse.ui.workbench:3.120.0")
-    compile(project(path = ":saros.eclipse", configuration = "testing"))
+    implementation(project(path = ":saros.eclipse", configuration = "testing"))

-    releaseDep(fileTree("libs"))
+    api(fileTree("libs"))
 }

 sourceSets {
